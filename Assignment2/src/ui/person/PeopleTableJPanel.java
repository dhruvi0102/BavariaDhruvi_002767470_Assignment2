/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Hospital.City;
import Hospital.CityDirectory;
import Hospital.Community;
import Hospital.House;
import Hospital.Person;
import Hospital.PersonDirectory;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author dhruv
 */
public class PeopleTableJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PeopleTableJPanel
     */
    JPanel workAreaJPanel;
    CityDirectory cityDirectory;
    Person selectedPerson;
    PersonDirectory personDirectory;
//    public PeopleTableJPanel() {
//        initComponents();
//    }

    PeopleTableJPanel(JPanel workAreaJPanel, CityDirectory cityDirectory,PersonDirectory personDirectory) {
        initComponents();
        this.workAreaJPanel = workAreaJPanel;
        this.cityDirectory = cityDirectory;
        this.personDirectory=personDirectory;
        selectedPerson = new Person();
        populatePeopleTable();
        populateCityCombo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPeopleSearch = new javax.swing.JButton();
        cmbCommunity = new javax.swing.JComboBox();
        cmbCity = new javax.swing.JComboBox();
        lblLName = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPeopleTable = new javax.swing.JTable();
        txtCity = new javax.swing.JTextField();
        lblPHouseName = new javax.swing.JLabel();
        btnPersonUpdate = new javax.swing.JButton();
        lblSearchPeople = new javax.swing.JLabel();
        lblSSN = new javax.swing.JLabel();
        txtSSN = new javax.swing.JTextField();
        lblFName = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        txtSearchBySSN = new javax.swing.JTextField();
        btnPersonView = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        txtCommunity = new javax.swing.JTextField();
        txtLName = new javax.swing.JTextField();
        lblPhoneNumber = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        txtGender = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();

        btnPeopleSearch.setText("Search");
        btnPeopleSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPeopleSearchActionPerformed(evt);
            }
        });

        cmbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCityActionPerformed(evt);
            }
        });

        setBackground(new java.awt.Color(204, 204, 255));

        lblLName.setForeground(new java.awt.Color(0, 102, 102));
        lblLName.setText("LastName:");

        lblCommunity.setForeground(new java.awt.Color(0, 102, 102));
        lblCommunity.setText("Community:");

        tblPeopleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "FirstName", "LastName", "SSN", "Phone Number", "City", "Community", "Age", "Gender", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPeopleTable);

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });
        txtCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCityKeyReleased(evt);
            }
        });

        btnPersonUpdate.setForeground(new java.awt.Color(0, 102, 102));
        btnPersonUpdate.setText("UPDATE");
        btnPersonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonUpdateActionPerformed(evt);
            }
        });

        lblSearchPeople.setText("Search By SSN:");

        lblSSN.setForeground(new java.awt.Color(0, 102, 102));
        lblSSN.setText("SSN:");

        lblFName.setForeground(new java.awt.Color(0, 102, 102));
        lblFName.setText("FirstName:");

        txtSearchBySSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBySSNActionPerformed(evt);
            }
        });

        btnPersonView.setForeground(new java.awt.Color(0, 102, 102));
        btnPersonView.setText("VIEW");
        btnPersonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonViewActionPerformed(evt);
            }
        });

        btnDeletePerson.setForeground(new java.awt.Color(0, 102, 102));
        btnDeletePerson.setText("DELETE");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        lblPhoneNumber.setForeground(new java.awt.Color(0, 102, 102));
        lblPhoneNumber.setText("Phone Number:");

        lblCity.setForeground(new java.awt.Color(0, 102, 102));
        lblCity.setText("City:");

        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Age:");

        lblGender.setForeground(new java.awt.Color(0, 102, 102));
        lblGender.setText("Gender:");

        lblEmail.setForeground(new java.awt.Color(0, 102, 102));
        lblEmail.setText("Email:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtFName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblSSN)
                                        .addGap(63, 63, 63)
                                        .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtLName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblEmail)
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtGender, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtAge, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPhoneNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCommunity)
                            .addComponent(lblFName)
                            .addComponent(lblLName)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCity)
                                .addGap(171, 171, 171)
                                .addComponent(lblPHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblPhoneNumber))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPersonUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPersonView)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeletePerson))
                            .addComponent(lblGender))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(301, 301, 301)
                .addComponent(lblSearchPeople)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchBySSN, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSSN)
                    .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFName)
                    .addComponent(txtFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLName)
                    .addComponent(txtLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommunity)
                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneNumber)
                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender)
                    .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSearchPeople, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSearchBySSN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPersonUpdate)
                    .addComponent(btnPersonView)
                    .addComponent(btnDeletePerson))
                .addGap(27, 27, 27))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPeopleSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPeopleSearchActionPerformed
        // TODO add your handling code here:
        //        ((City)cmbCity.getSelectedItem()).getCityData().getCommunities().get
        if(((City) cmbCity.getSelectedItem()) == null) {
            JOptionPane.showMessageDialog(this, "City not present", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(((Community) cmbCommunity.getSelectedItem()) == null) {
            JOptionPane.showMessageDialog(this, "Community not present int he city", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        House house = ((House) ((Community) cmbCommunity.getSelectedItem()).getEnteredHouse(txtCity.getText()));
        if (house == null) {
            JOptionPane.showMessageDialog(this, "House not present in the community", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        List<Person> personList = house.getPeople();
        populatePeopleTable();
    }//GEN-LAST:event_btnPeopleSearchActionPerformed

    private void cmbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCityActionPerformed
        // TODO add your handling code here:
        populateCommunityCombo();
    }//GEN-LAST:event_cmbCityActionPerformed

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void txtCityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCityKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityKeyReleased

    private void btnPersonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonUpdateActionPerformed
        // TODO add your handling code here:
        int i= tblPeopleTable.getSelectedRow();
        if(i<0){
           JOptionPane.showMessageDialog(null,"Error"); 
        }
        
        else{
            //Get the data for textfields:
            DefaultTableModel model= (DefaultTableModel)tblPeopleTable.getModel();
            
            String FirstName= txtFName.getText();
            String LastName= txtLName.getText();
            int SSN= Integer.parseInt(txtSSN.getText());           
            String City= txtCity.getText();
            String Community= txtCommunity.getText();
            int Mobile_Number= Integer.parseInt(txtPhoneNumber.getText());
            int Age = Integer.parseInt(txtAge.getText());
            String Gender = txtGender.getText();
            String Email = txtEmail.getText();
            
            //set updated value on table row
            model.setValueAt(FirstName, tblPeopleTable.getSelectedRow(),0);
            model.setValueAt(LastName, tblPeopleTable.getSelectedRow(),1);
            model.setValueAt(SSN, tblPeopleTable.getSelectedRow(),1);
            model.setValueAt(Mobile_Number, tblPeopleTable.getSelectedRow(),2);
            model.setValueAt(City, tblPeopleTable.getSelectedRow(),3);
            model.setValueAt(Community, tblPeopleTable.getSelectedRow(),4);
            model.setValueAt(Age,tblPeopleTable.getSelectedRow(),5);
            model.setValueAt(Gender,tblPeopleTable.getSelectedRow(),5);
            model.setValueAt(Email,tblPeopleTable.getSelectedRow(),5);
           
            // After successfully setting, display the data:
            JOptionPane.showMessageDialog(null,"Update Successful!");
 
        }
        
    }//GEN-LAST:event_btnPersonUpdateActionPerformed

    private void btnPersonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonViewActionPerformed
        // TODO add your handling code here:
           int i= tblPeopleTable.getSelectedRow();
        if(i<0){
            JOptionPane.showMessageDialog(this,"Error");
                    return;
        }
            DefaultTableModel model= (DefaultTableModel)tblPeopleTable.getModel();
            Person selectedPerson = (Person) model.getValueAt(i,0);
            //set the data in textfields on clicking view button:
            
            txtSSN.setText(String.valueOf(selectedPerson.getSocialSecurityNum()));
            txtFName.setText(selectedPerson.getFirstName());
            txtLName.setText(selectedPerson.getLastName());
            txtCommunity.setText(selectedPerson.getCommunity());
            txtCity.setText(selectedPerson.getCity());
            txtPhoneNumber.setText(String.valueOf(selectedPerson.getPhoneNumber()));
            txtAge.setText(String.valueOf(selectedPerson.getAge()));
            txtGender.setText(String.valueOf(selectedPerson.getGender()));
            txtEmail.setText(String.valueOf(selectedPerson.getEmail()));
        
    }//GEN-LAST:event_btnPersonViewActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        // TODO add your handling code here:
        int i= tblPeopleTable.getSelectedRow();
        
        if(i<0){
            JOptionPane.showMessageDialog(null,"Error"); 
        }
        
        else{
            
            DefaultTableModel model= (DefaultTableModel)tblPeopleTable.getModel();
            //Demographic demo = (Demographic) model.getValueAt(i,0);
            //previous_data.deleteEmployee(demo);
            
            //here j is variable of employee which is selected!
            String j= model.getValueAt(i,0).toString();
            personDirectory.getPeople().remove(i);
            model.removeRow(i);
            JOptionPane.showMessageDialog(null,"Hospital Deleted");
            
            populatePeopleTable();  
            //removing data textfield values from the display bars:
            
            txtSSN.setText("");
            txtFName.setText("");
            txtLName.setText("");
            txtCommunity.setText("");
            txtCity.setText("");
            txtPhoneNumber.setText("");
        }
        
    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void txtSearchBySSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBySSNActionPerformed
        // TODO add your handling code here:
        
        String matchName = txtSearchBySSN.getText();
        
        DefaultTableModel model = (DefaultTableModel) tblPeopleTable.getModel();
        model.setRowCount(0);
        
        for(Person person: personDirectory.getPeople()) {
            
            String n = String.valueOf(person.getSocialSecurityNum());
            
            if(n.equals(matchName)) {
              
                Object[] row = new Object[10];
                
                row[0] = person;
                row[1] = person.getLastName();
                row[2] = person.getSocialSecurityNum();
                row[3] = person.getPhoneNumber();
                row[4] = person.getCity();
                row[5] = person.getCommunity();
                row[6] = person.getAge();
                row[7] = person.getGender();
                row[8] = person.getEmail();
            
            model.addRow(row); 
            //clearing the field
            txtSearchBySSN.setText("");
            }
    } 
        
    }//GEN-LAST:event_txtSearchBySSNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnPeopleSearch;
    private javax.swing.JButton btnPersonUpdate;
    private javax.swing.JButton btnPersonView;
    private javax.swing.JComboBox cmbCity;
    private javax.swing.JComboBox cmbCommunity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLName;
    private javax.swing.JLabel lblPHouseName;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblSSN;
    private javax.swing.JLabel lblSearchPeople;
    private javax.swing.JTable tblPeopleTable;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtLName;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtSSN;
    private javax.swing.JTextField txtSearchBySSN;
    // End of variables declaration//GEN-END:variables

    public void populateCityCombo() {
        cmbCity.removeAllItems();
        for (City s : cityDirectory.getCities()) {
            cmbCity.addItem(s);
        }
    }

    private void populateCommunityCombo() {
        cmbCommunity.removeAllItems();
        if (cmbCity.getSelectedItem() != null) {
            for (Community s : ((City) cmbCity.getSelectedItem()).getCityData().getCommunities()) {
                cmbCommunity.addItem(s);
            }
        }
    }

    private void populatePeopleTable() {

            DefaultTableModel model = (DefaultTableModel) tblPeopleTable.getModel();
            model.setRowCount(0);
            DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
            for (Person person : personDirectory.getPeople()) {
                Object[] row = new Object[10];
                
                row[0] = person;
                row[1] = person.getLastName();
                row[2] = person.getSocialSecurityNum();
                row[3] = person.getPhoneNumber();
                row[4] = person.getCity();
                row[5] = person.getCommunity();
                row[6] = person.getAge();
                row[7] = person.getGender();
                row[8] = person.getEmail();

                model.addRow(row);
            }
            
            
            
//            DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
//            txtPFirstName.setText(personInformation.getPersonDemographics().getFirstName());
//            txtPLastName.setText(personInformation.getPersonDemographics().getLastName());
//            txtPPhoneNum.setText(String.valueOf(personInformation.getPersonDemographics().getPhoneNumber()));
//            txtPDob.setText(dateFormat.format(personInformation.getPersonDemographics().getDob()));
//            txtPAge.setText(String.valueOf(personInformation.getPersonDemographics().getAge()));
//            txtPHeight.setText(String.valueOf(personInformation.getPersonDemographics().getHeight()));
//            txtPWeight.setText(String.valueOf(personInformation.getPersonDemographics().getWeight()));
//            txtPSsn.setText(String.valueOf(personInformation.getPersonDemographics().getSocialSecurityNum()));
        } 

}
