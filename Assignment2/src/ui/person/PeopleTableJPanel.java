/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.person;

import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Hospital.City;
import Hospital.CityDirectory;
import Hospital.Community;
import Hospital.House;
import Hospital.Person;
import Hospital.PersonDirectory;
import ui.patient.AddPatientVitalSignsJPanel;

/**
 *
 * @author dhruv
 */
public class PeopleTableJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PeopleTableJPanel
     */
    JPanel workAreaJPanel;
    CityDirectory cityDirectory;
    Person selectedPerson;
//    public PeopleTableJPanel() {
//        initComponents();
//    }

    PeopleTableJPanel(JPanel workAreaJPanel, CityDirectory cityDirectory) {
        initComponents();
        this.workAreaJPanel = workAreaJPanel;
        this.cityDirectory = cityDirectory;
        selectedPerson = new Person();
        populateCityCombo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCityName = new javax.swing.JLabel();
        cmbCity = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cmbCommunity = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPoepleList = new javax.swing.JTable();
        btnPeopleSearch = new javax.swing.JButton();
        txtPHouseName = new javax.swing.JTextField();
        lblPHouseName = new javax.swing.JLabel();
        btnPersonUpdate = new javax.swing.JButton();

        lblCityName.setText("Select City");

        cmbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCityActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Community");

        tblPoepleList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "SSN", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPoepleList);

        btnPeopleSearch.setText("Search");
        btnPeopleSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPeopleSearchActionPerformed(evt);
            }
        });

        txtPHouseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPHouseNameActionPerformed(evt);
            }
        });
        txtPHouseName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPHouseNameKeyReleased(evt);
            }
        });

        lblPHouseName.setText("Enter house name");

        btnPersonUpdate.setText("Update selected person");
        btnPersonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCityName, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1)
                        .addGap(50, 50, 50)
                        .addComponent(cmbCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPeopleSearch)
                            .addComponent(txtPHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnPersonUpdate)
                        .addGap(6, 6, 6)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbCity, cmbCommunity, txtPHouseName});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCityName)
                    .addComponent(cmbCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(btnPeopleSearch)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPersonUpdate)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPeopleSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPeopleSearchActionPerformed
        // TODO add your handling code here:
        //        ((City)cmbCity.getSelectedItem()).getCityData().getCommunities().get
        if(((City) cmbCity.getSelectedItem()) == null) {
            JOptionPane.showMessageDialog(this, "City not present", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(((Community) cmbCommunity.getSelectedItem()) == null) {
            JOptionPane.showMessageDialog(this, "Community not present int he city", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        House house = ((House) ((Community) cmbCommunity.getSelectedItem()).getEnteredHouse(txtPHouseName.getText()));
        if (house == null) {
            JOptionPane.showMessageDialog(this, "House not present in the community", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        List<Person> personList = house.getPeople();
        populatePeopleTable(personList);
    }//GEN-LAST:event_btnPeopleSearchActionPerformed

    private void cmbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCityActionPerformed
        // TODO add your handling code here:
        populateCommunityCombo();
    }//GEN-LAST:event_cmbCityActionPerformed

    private void txtPHouseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPHouseNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPHouseNameActionPerformed

    private void txtPHouseNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPHouseNameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPHouseNameKeyReleased

    private void btnPersonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPoepleList.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int ssNumber = (Integer)tblPoepleList.getValueAt(selectedRowIndex, 1);
        selectedPerson = PersonDirectory.getPeople().stream().filter(o -> String.valueOf(o.getSocialSecurityNum()).equals(String.valueOf(ssNumber))).
        findFirst().orElse(null);

        //UpdatePersonJPanel upjp = new UpdatePersonJPanel(workAreaJPanel, cityDirectory, selectedPerson);
        //workAreaJPanel.add("UpdatePersonJPanel", upjp);
        //CardLayout layout = (CardLayout) workAreaJPanel.getLayout();
        //layout.next(workAreaJPanel);
    }//GEN-LAST:event_btnPersonUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPeopleSearch;
    private javax.swing.JButton btnPersonUpdate;
    private javax.swing.JComboBox cmbCity;
    private javax.swing.JComboBox cmbCommunity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCityName;
    private javax.swing.JLabel lblPHouseName;
    private javax.swing.JTable tblPoepleList;
    private javax.swing.JTextField txtPHouseName;
    // End of variables declaration//GEN-END:variables

    public void populateCityCombo() {
        cmbCity.removeAllItems();
        for (City s : cityDirectory.getCities()) {
            cmbCity.addItem(s);
        }
    }

    private void populateCommunityCombo() {
        cmbCommunity.removeAllItems();
        if (cmbCity.getSelectedItem() != null) {
            for (Community s : ((City) cmbCity.getSelectedItem()).getCityData().getCommunities()) {
                cmbCommunity.addItem(s);
            }
        }
    }

    private void populatePeopleTable(List<Person> personList) {

        try {
            DefaultTableModel model = (DefaultTableModel) tblPoepleList.getModel();
            model.setRowCount(0);
            DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
            for (Person person : personList) {
                Object row[] = new Object[4];
                row[0] = String.valueOf(person.getFirstName() + " " + person.getLastName());
                row[1] = person.getSocialSecurityNum();
                row[2] = dateFormat.format(person.getDob());
                row[3] = String.valueOf(person.getPhoneNumber());
                model.addRow(row);
            }
//            DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
//            txtPFirstName.setText(personInformation.getPersonDemographics().getFirstName());
//            txtPLastName.setText(personInformation.getPersonDemographics().getLastName());
//            txtPPhoneNum.setText(String.valueOf(personInformation.getPersonDemographics().getPhoneNumber()));
//            txtPDob.setText(dateFormat.format(personInformation.getPersonDemographics().getDob()));
//            txtPAge.setText(String.valueOf(personInformation.getPersonDemographics().getAge()));
//            txtPHeight.setText(String.valueOf(personInformation.getPersonDemographics().getHeight()));
//            txtPWeight.setText(String.valueOf(personInformation.getPersonDemographics().getWeight()));
//            txtPSsn.setText(String.valueOf(personInformation.getPersonDemographics().getSocialSecurityNum()));
        } catch (Exception e) {

        }
    }
}
